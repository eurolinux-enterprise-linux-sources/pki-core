From a7ad59a68a50537c3e0cf47638744a1b45dbb28b Mon Sep 17 00:00:00 2001
From: Andrew Wnuk <awnuk@redhat.com>
Date: Thu, 13 Dec 2012 17:49:35 -0800
Subject: [PATCH] Resolves #885790 - Multiple cross-site scripting flaws by
 displaying CRL or processing profile.

---
 base/ca/shared/conf/CS.cfg.in                      |    1 +
 base/common/src/CMakeLists.txt                     |    1 +
 .../authentication/UserPwdDirAuthentication.java   |  303 ++++++++++++++++++++
 .../com/netscape/cms/servlet/cert/DisplayCRL.java  |   16 +-
 .../src/com/netscape/cms/servlet/cert/GetCRL.java  |   13 +-
 .../cms/servlet/profile/ProfileProcessServlet.java |   10 +-
 .../netscape/cms/servlet/request/CheckRequest.java |    9 +-
 7 files changed, 341 insertions(+), 12 deletions(-)
 create mode 100644 base/common/src/com/netscape/cms/authentication/UserPwdDirAuthentication.java

diff --git a/base/ca/shared/conf/CS.cfg.in b/base/ca/shared/conf/CS.cfg.in
index 7f7c8e6..f3cb002 100644
--- a/base/ca/shared/conf/CS.cfg.in
+++ b/base/ca/shared/conf/CS.cfg.in
@@ -166,6 +166,7 @@ auths.impl.UdnPwdDirAuth.class=com.netscape.cms.authentication.UdnPwdDirAuthenti
 auths.impl.UidPwdDirAuth.class=com.netscape.cms.authentication.UidPwdDirAuthentication
 auths.impl.UidPwdPinDirAuth.class=com.netscape.cms.authentication.UidPwdPinDirAuthentication
 auths.impl.UidPwdGroupDirAuth.class=com.netscape.cms.authentication.UidPwdGroupDirAuthentication
+auths.impl.UserPwdDirAuth.class=com.netscape.cms.authentication.UserPwdDirAuthentication
 auths.impl.TokenAuth.class=com.netscape.cms.authentication.TokenAuthentication
 auths.impl.FlatFileAuth.class=com.netscape.cms.authentication.FlatFileAuth
 auths.instance.TokenAuth.pluginName=TokenAuth
diff --git a/base/common/src/CMakeLists.txt b/base/common/src/CMakeLists.txt
index 2df82b8..5b9bedf 100644
--- a/base/common/src/CMakeLists.txt
+++ b/base/common/src/CMakeLists.txt
@@ -671,6 +671,7 @@ set(pki-cms_java_SRCS
     com/netscape/cms/authentication/UidPwdPinDirAuthentication.java
     com/netscape/cms/authentication/SSLclientCertAuthentication.java
     com/netscape/cms/authentication/UidPwdDirAuthentication.java
+    com/netscape/cms/authentication/UserPwdDirAuthentication.java
     com/netscape/cms/authorization/BasicAclAuthz.java
     com/netscape/cms/authorization/AAclAuthz.java
     com/netscape/cms/authorization/DirAclAuthz.java
diff --git a/base/common/src/com/netscape/cms/authentication/UserPwdDirAuthentication.java b/base/common/src/com/netscape/cms/authentication/UserPwdDirAuthentication.java
new file mode 100644
index 0000000..5cee121
--- /dev/null
+++ b/base/common/src/com/netscape/cms/authentication/UserPwdDirAuthentication.java
@@ -0,0 +1,303 @@
+// --- BEGIN COPYRIGHT BLOCK ---
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation; version 2 of the License.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License along
+// with this program; if not, write to the Free Software Foundation, Inc.,
+// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+//
+// (C) 2012 Red Hat, Inc.
+// All rights reserved.
+// --- END COPYRIGHT BLOCK ---
+package com.netscape.cms.authentication;
+
+
+// ldap java sdk
+import netscape.ldap.*;
+
+// cert server imports.
+import com.netscape.certsrv.base.IConfigStore;
+import com.netscape.certsrv.base.EBaseException;
+import com.netscape.certsrv.base.EPropertyNotFound;
+import com.netscape.certsrv.base.IExtendedPluginInfo;
+import com.netscape.certsrv.ldap.ELdapException;
+import com.netscape.certsrv.ldap.LdapResources;
+import com.netscape.certsrv.logging.ILogger;
+import com.netscape.certsrv.authentication.*;
+import com.netscape.certsrv.profile.*;
+import com.netscape.certsrv.request.*;
+import com.netscape.certsrv.property.*;
+import com.netscape.certsrv.apps.*;
+
+// cert server x509 imports
+import netscape.security.x509.X509CertInfo;
+import netscape.security.x509.X500Name;
+import netscape.security.x509.CertificateSubjectName;
+import java.security.cert.CertificateException;
+
+// java sdk imports.
+import java.util.Hashtable;
+import java.util.Vector;
+import java.util.Locale;
+import java.util.Enumeration;
+import java.io.IOException;
+
+
+/**
+ * uid/pwd directory based authentication manager
+ * <P>
+ *
+ * @version $Revision$, $Date$
+ */
+public class UserPwdDirAuthentication extends DirBasedAuthentication 
+    implements IProfileAuthenticator {
+
+    /* required credentials to authenticate. uid and pwd are strings. */
+    public static final String CRED_UID = "uid";
+    public static final String CRED_PWD = "pwd";
+    public String mAttr = CRED_UID;
+
+    protected String[] mRequiredCreds = { mAttr, CRED_PWD };
+
+    protected String mAttrName = null;
+    protected String mAttrDesc = null;
+
+    /* Holds configuration parameters accepted by this implementation.
+     * This list is passed to the configuration console so configuration
+     * for instances of this implementation can be configured through the
+     * console.
+     */
+    protected static String[] mConfigParams = 
+        new String[] {	PROP_DNPATTERN,
+            PROP_LDAPSTRINGATTRS,
+            PROP_LDAPBYTEATTRS,
+            "ldap.ldapconn.host",
+            "ldap.ldapconn.port",
+            "ldap.ldapconn.secureConn",
+            "ldap.ldapconn.version",
+            "ldap.basedn",
+            "ldap.attrName",
+            "ldap.attrDesc",
+            "ldap.minConns", 
+            "ldap.maxConns",
+        };
+
+    static {
+        mExtendedPluginInfo.add("ldap.attrName;string,required;Attribute name "+
+            "like 'cn' or 'uid' allowing to build user's DN by combining "+
+            "user name with base DN for  example  'cn=jsmith, o=company'.");
+        mExtendedPluginInfo.add("ldap.attrDesc;string,required;Attribute description "+
+            "like 'LDAP User CN' or 'LDAP User UID' presented on enrollment page.");
+        mExtendedPluginInfo.add(IExtendedPluginInfo.HELP_TEXT +
+            ";Authenticate the username and password provided " +
+            "by the user against an LDAP directory. Works with the " +
+            "Dir Based Enrollment HTML form");
+        mExtendedPluginInfo.add(IExtendedPluginInfo.HELP_TOKEN +
+            ";configuration-authrules-uidpwddirauth");
+    };
+
+    /**
+     * Default constructor, initialization must follow.
+     */
+    public UserPwdDirAuthentication() {
+        super();
+    }
+
+    /**
+     * Initializes the UdnPwdDirAuthentication auth manager.
+     * <p>
+     * @param name - The name for this authentication manager instance.
+     * @param implName - The name of the authentication manager plugin.
+     * @param config - The configuration store for this instance.
+     * @exception EBaseException If an error occurs during initialization.
+     */
+    public void init(String name, String implName, IConfigStore config)
+        throws EBaseException {
+        super.init(name, implName, config);
+
+        CMS.debug("UserPwdDirAuthentication init");
+        mAttrName = mLdapConfig.getString("attrName", null);
+        if (mAttrName == null || mAttrName.trim().length() == 0) {
+            throw new EPropertyNotFound(CMS.getUserMessage("CMS_BASE_GET_PROPERTY_FAILED", "attrName"));
+        }
+        mAttrName = mAttrName.trim();
+
+        mAttrDesc = mLdapConfig.getString("attrDesc", null);
+        if (mAttrDesc == null || mAttrDesc.trim().length() == 0) {
+            throw new EPropertyNotFound(CMS.getUserMessage("CMS_BASE_GET_PROPERTY_FAILED", "attrDesc"));
+        }
+        mAttrDesc = mAttrDesc.trim();
+
+        if (mAttrName != null && mAttrName.length() > 0) {
+            mAttr = mAttrName;
+        }
+        CMS.debug("UserPwdDirAuthentication init  mAttr="+mAttr+
+                  "  mAttrName="+mAttrName+"  mAttrDesc="+mAttrDesc);
+    }
+
+    /**
+     * Authenticates a user based on attr, pwd in the directory.
+     * 
+     * @param authCreds The authentication credentials.
+     * @return The user's ldap entry dn.
+     * @exception EInvalidCredentials If the attr and password are not valid
+     * @exception EBaseException If an internal error occurs. 
+     */
+    protected String authenticate(LDAPConnection conn, 
+        IAuthCredentials authCreds,
+        AuthToken token)
+        throws EBaseException {
+        String userdn = null;
+        String attr = null;
+
+        // authenticate by binding to ldap server with password.
+        try {
+            // get the attr.
+            attr = (String) authCreds.get(mAttr);
+            CMS.debug("Authenticating "+mAttr+"=" + attr);
+            if (attr == null) {
+                throw new EMissingCredential(CMS.getUserMessage("CMS_AUTHENTICATION_NULL_CREDENTIAL", mAttr));
+            }
+
+            // get the password.
+            String pwd = (String) authCreds.get(CRED_PWD);
+
+            if (pwd == null) {
+                throw new EMissingCredential(CMS.getUserMessage("CMS_AUTHENTICATION_NULL_CREDENTIAL",CRED_PWD));
+            }
+            if (pwd.equals("")) {
+                // anonymous binding not allowed
+                log(ILogger.LL_FAILURE, CMS.getLogMessage("CMS_AUTH_EMPTY_PASSWORD", attr));
+                throw new EInvalidCredentials(CMS.getUserMessage("CMS_AUTHENTICATION_INVALID_CREDENTIAL"));
+            }
+
+            // get user dn.
+            userdn = mAttr+"="+attr+","+mBaseDN;
+            CMS.debug("Authenticating: userdn=" + userdn);
+            // bind as user dn and pwd - authenticates user with pwd.
+            conn.authenticate(userdn, pwd);
+            CMS.debug("Authenticated: userdn=" + userdn);
+            // set attr in the token.
+            token.set(mAttr, attr);
+
+            return userdn;
+        } catch (ELdapException e) {
+            log(ILogger.LL_FAILURE, CMS.getLogMessage("CANNOT_CONNECT_LDAP", e.toString()));
+            throw e;
+        } catch (LDAPException e) {
+            switch (e.getLDAPResultCode()) {
+            case LDAPException.NO_SUCH_OBJECT: 
+            case LDAPException.LDAP_PARTIAL_RESULTS: 
+                log(ILogger.LL_SECURITY, CMS.getLogMessage("USER_NOT_EXIST", attr));
+                throw new EInvalidCredentials(CMS.getUserMessage("CMS_AUTHENTICATION_INVALID_CREDENTIAL"));
+
+            case LDAPException.INVALID_CREDENTIALS:
+                log(ILogger.LL_SECURITY, CMS.getLogMessage("CMS_AUTH_BAD_PASSWORD", attr));
+                throw new EInvalidCredentials(CMS.getUserMessage("CMS_AUTHENTICATION_INVALID_CREDENTIAL"));
+
+            case LDAPException.SERVER_DOWN:
+                log(ILogger.LL_FAILURE, CMS.getLogMessage("LDAP_SERVER_DOWN"));
+                throw new ELdapException(
+                        CMS.getUserMessage("CMS_LDAP_SERVER_UNAVAILABLE", conn.getHost(), "" + conn.getPort()));
+
+            default: 
+                log(ILogger.LL_FAILURE, CMS.getLogMessage("OPERATION_ERROR", e.getMessage()));
+                throw new ELdapException(
+                        CMS.getUserMessage("CMS_LDAP_OTHER_LDAP_EXCEPTION", 
+                            e.errorCodeToString()));
+            }
+        } 
+    }
+
+    /**
+     * Returns a list of configuration parameter names. 
+     * The list is passed to the configuration console so instances of 
+     * this implementation can be configured through the console.
+     *
+     * @return String array of configuration parameter names.
+     */
+    public String[] getConfigParams() {
+        return (mConfigParams);
+    }
+
+    /**
+     * Returns array of required credentials for this authentication manager.
+     * @return Array of required credentials.
+     */
+    public String[] getRequiredCreds() {
+        return mRequiredCreds;
+    }
+
+    // Profile-related methods
+
+    public void init(IProfile profile, IConfigStore config)
+        throws EProfileException {
+    }
+
+    /**
+     * Retrieves the localizable name of this policy.
+     */
+    public String getName(Locale locale) {
+        return CMS.getUserMessage(locale, "CMS_AUTHENTICATION_LDAP_UID_NAME");
+    }
+
+    /**
+     * Retrieves the localizable description of this policy.
+     */
+    public String getText(Locale locale) {
+        return CMS.getUserMessage(locale, "CMS_AUTHENTICATION_LDAP_UID_TEXT");
+    }
+
+    /**
+     * Retrieves a list of names of the value parameter.
+     */
+    public Enumeration getValueNames() {
+        Vector v = new Vector();
+
+        v.addElement(mAttr);
+        v.addElement(CRED_PWD);
+        return v.elements();
+    }
+
+    public boolean isValueWriteable(String name) {
+        if (name.equals(mAttr)) {
+            return true;
+        } else if (name.equals(CRED_PWD)) {
+            return false;
+        }
+        return false;
+    }
+
+    /**
+     * Retrieves the descriptor of the given value
+     * parameter by name.
+     */
+    public IDescriptor getValueDescriptor(Locale locale, String name) {
+        if (name.equals(mAttr)) { 
+            return new Descriptor(IDescriptor.STRING, null, null,
+                    ((mAttrDesc != null && mAttrDesc.length() > 0)? mAttrDesc:
+                    CMS.getUserMessage(locale, "CMS_AUTHENTICATION_LDAP_UID")));
+        } else if (name.equals(CRED_PWD)) {
+            return new Descriptor(IDescriptor.PASSWORD, null, null,
+                    CMS.getUserMessage(locale, "CMS_AUTHENTICATION_LDAP_PWD"));
+	
+        }
+        return null;
+    }
+
+    public void populate(IAuthToken token, IRequest request) 
+        throws EProfileException {
+        request.setExtData(IProfileAuthenticator.AUTHENTICATED_NAME,
+                token.getInString(USER_DN));
+    }
+
+    public boolean isSSLClientRequired() {
+        return false;
+    }
+}
diff --git a/base/common/src/com/netscape/cms/servlet/cert/DisplayCRL.java b/base/common/src/com/netscape/cms/servlet/cert/DisplayCRL.java
index 9c7b022..dcc3b3c 100644
--- a/base/common/src/com/netscape/cms/servlet/cert/DisplayCRL.java
+++ b/base/common/src/com/netscape/cms/servlet/cert/DisplayCRL.java
@@ -227,7 +227,8 @@ public class DisplayCRL extends CMSServlet {
         }
         if (crlIssuingPointId == null) {
             header.addStringValue("error",
-                "Request to unspecified or non-existing CRL issuing point: "+ipId);
+                "Request to unspecified or non-existing CRL issuing point: "+
+                CMSTemplate.escapeJavaScriptStringHTML(ipId));
             return;
         }
 
@@ -312,12 +313,21 @@ public class DisplayCRL extends CMSServlet {
                 String pageSize = req.getParameter("pageSize");
 
                 if (pageStart != null && pageSize != null) {
-                    long lPageStart = new Long(pageStart).longValue();
-                    long lPageSize = new Long(pageSize).longValue();
+                    long lPageStart = 0L;
+                    long lPageSize = 0L;
+                    try {
+                        lPageStart = new Long(pageStart).longValue();
+                    } catch (NumberFormatException e) {
+                    }
+                    try {
+                        lPageSize = new Long(pageSize).longValue();
+                    } catch (NumberFormatException e) {
+                    }
 
                     if (lPageStart < 1) lPageStart = 1;
                     // if (lPageStart + lPageSize - lCRLSize > 1)
                     //     lPageStart = lCRLSize - lPageSize + 1;
+                    if (lPageSize < 1) lPageSize = 10;
 
                     header.addStringValue(
                         "crlPrettyPrint", crlDetails.toString(locale,
diff --git a/base/common/src/com/netscape/cms/servlet/cert/GetCRL.java b/base/common/src/com/netscape/cms/servlet/cert/GetCRL.java
index 6298b7d..d90bc82 100644
--- a/base/common/src/com/netscape/cms/servlet/cert/GetCRL.java
+++ b/base/common/src/com/netscape/cms/servlet/cert/GetCRL.java
@@ -314,10 +314,19 @@ CMS.debug("**** mFormPath before getTemplate = "+mFormPath);
                     String pageSize = args.getValueAsString("pageSize", null);
 
                     if (pageStart != null && pageSize != null) {
-                        long lPageStart = new Long(pageStart).longValue();
-                        long lPageSize = new Long(pageSize).longValue();
+                        long lPageStart = 0L;
+                        long lPageSize = 0L;
+                        try {
+                            lPageStart = new Long(pageStart).longValue();
+                        } catch (NumberFormatException e) {
+                        }
+                        try {
+                            lPageSize = new Long(pageSize).longValue();
+                        } catch (NumberFormatException e) {
+                        }
 
                         if (lPageStart < 1) lPageStart = 1;
+                        if (lPageSize < 1) lPageSize = 10;
 
                         header.addStringValue("crlPrettyPrint",
                                  crlDetails.toString(locale[0],
diff --git a/base/common/src/com/netscape/cms/servlet/profile/ProfileProcessServlet.java b/base/common/src/com/netscape/cms/servlet/profile/ProfileProcessServlet.java
index 92cfa9b..4b8158c 100644
--- a/base/common/src/com/netscape/cms/servlet/profile/ProfileProcessServlet.java
+++ b/base/common/src/com/netscape/cms/servlet/profile/ProfileProcessServlet.java
@@ -131,7 +131,11 @@ public class ProfileProcessServlet extends ProfileServlet {
             String requestNonce = request.getParameter(ARG_REQUEST_NONCE);
             boolean nonceVerified = false;
             if (requestNonce != null) {
-                long nonce = Long.parseLong(requestNonce.trim());
+                long nonce = 0L;
+                try {
+                    nonce = Long.parseLong(requestNonce.trim());
+                } catch (NumberFormatException e) {
+                }
                 X509Certificate cert1 = mNonces.getCertificate(nonce);
                 X509Certificate cert2 = getSSLClientCertificate(request);
                 if (cert1 == null) {
@@ -237,7 +241,7 @@ public class ProfileProcessServlet extends ProfileServlet {
         if (req == null) {
             args.set(ARG_ERROR_CODE, "1");
             args.set(ARG_ERROR_REASON, CMS.getUserMessage(locale,
-                    "CMS_REQUEST_NOT_FOUND", requestId));
+                    "CMS_REQUEST_NOT_FOUND", escapeJavaScriptString(requestId)));
             outputTemplate(request, response, args);
             if (statsSub != null) {
               statsSub.endTiming("approval");
@@ -299,7 +303,7 @@ public class ProfileProcessServlet extends ProfileServlet {
         if (profile == null) {
             args.set(ARG_ERROR_CODE, "1");
             args.set(ARG_ERROR_REASON, CMS.getUserMessage(locale,
-                    "CMS_PROFILE_NOT_FOUND", profileId));
+                    "CMS_PROFILE_NOT_FOUND", escapeJavaScriptString(profileId)));
             outputTemplate(request, response, args);
             if (statsSub != null) {
               statsSub.endTiming("approval");
diff --git a/base/common/src/com/netscape/cms/servlet/request/CheckRequest.java b/base/common/src/com/netscape/cms/servlet/request/CheckRequest.java
index 162946c..81ea021 100644
--- a/base/common/src/com/netscape/cms/servlet/request/CheckRequest.java
+++ b/base/common/src/com/netscape/cms/servlet/request/CheckRequest.java
@@ -256,11 +256,12 @@ public class CheckRequest extends CMSServlet {
             throw new ECMSGWException(CMS.getUserMessage("CMS_GW_NO_REQUEST_ID_PROVIDED"));
         }
         try {
-            Integer.parseInt(requestId);
+            new BigInteger(requestId);
         } catch (NumberFormatException e) {
             log(ILogger.LL_FAILURE, CMS.getLogMessage("BASE_INVALID_NUMBER_FORMAT_1", requestId));
             throw new EBaseException(
-                    CMS.getUserMessage(getLocale(req), "CMS_BASE_INVALID_NUMBER_FORMAT_1", requestId));
+                    CMS.getUserMessage(getLocale(req), "CMS_BASE_INVALID_NUMBER_FORMAT_1",
+                                       CMSTemplate.escapeJavaScriptStringHTML(requestId)));
         } 
 
         IRequest r = mQueue.findRequest(new RequestId(requestId));
@@ -295,12 +296,12 @@ public class CheckRequest extends CMSServlet {
         String note = r.getExtDataInString("requestNotes");
 
         header.addStringValue("authority", mAuthorityId);
-        header.addLongValue(REQ_ID, Long.parseLong(r.getRequestId().toString()));
+        header.addStringValue(REQ_ID, r.getRequestId().toString());
         header.addStringValue(STATUS, status.toString());
         header.addLongValue(CREATE_ON, r.getCreationTime().getTime() / 1000);
         header.addLongValue(UPDATE_ON, r.getModificationTime().getTime() / 1000);
         if (note != null && note.length() > 0) 
-            header.addStringValue("requestNotes", note);
+            header.addStringValue("requestNotes", CMSTemplate.escapeJavaScriptStringHTML(note));
 
         String type = r.getRequestType();
         Integer result = r.getExtDataInInteger(IRequest.RESULT);
-- 
1.7.7.6

